#!/bin/bash
#
# Tool to synchronize versioned and system dot files.
#
# Depends on:
# - rsync

# Sync command
SYNC="rsync -av --progress --delete --exclude='.git'"

# Initialize flags
DRYRUN=0
CONFIRM=0
OPERATION=""

function usage() {
    echo "Usage: sync [--confirm] (in|out) "
    echo "  in : copy files from system folders"
    echo "  out: copy files to system folders"
    echo "  --confirm: prompt for confirmation before synchronization"
    echo "  --dryrun: do not perform the action, just show the outcome"
    exit $1
}

# Parse command line options, except for the last mandatory operation
while [[ "$#" -gt 1 ]]; do
    case "$1" in
        --dryrun)
            DRYRUN=1
            ;;
        --confirm)
            CONFIRM=1
            ;;
        --help)
            usage 0
            ;;
        *)
            echo "Unknown option: $1"
            usage 1
            ;;
    esac
    shift
done

if [[ $1 == "--help" ]]; then
    usage 0
fi

# Check if the last argument is provided and is either "in" or "out"
if [[ "$#" -ne 1 || ( "$1" != "in" && "$1" != "out" ) ]]; then
    echo "Error: Missing or invalid operation. Expected 'in' or 'out'."
    usage 1
else
    OPERATION="$1"
fi

# Array of 'system | versioned' file couples
common=(
    # bash
    "$HOME/.bashrc | bash/bashrc"
    "$HOME/.bash_profile | bash/bash_profile"
    "$HOME/.profile | bash/profile"
    "$HOME/.inputrc | bash/inputrc"
    # gnupg
    "$HOME/.gnupg/gpg-agent.conf | gnupg/gpg-agent.conf"
    # fonts configuration
    "$HOME/.config/fontconfig/ | fontconfig/"
    # git
    "$HOME/.config/git/ | git/"
    # helix
    "$HOME/.config/helix/ | helix/"
    # zellij
    "$HOME/.config/zellij/ | zellij/"
    # cosmic
    "$HOME/.config/cosmic/ | cosmic"
    # fuzzel (used by rofimoji)
    "$HOME/.config/fuzzel/ | fuzzel/"
    # rofimoji
    "$HOME/.config/rofimoji.rc | rofimoji/rofimoji.rc"
    # alacritty
    "$HOME/.config/alacritty/ | alacritty/"
    # broot
    "$HOME/.config/broot/ | broot/"
    # ranger
    "$HOME/.config/ranger/ | ranger/"
    # yazi
    "$HOME/.config/yazi/ | yazi/"
    # gitui
    "$HOME/.config/gitui/ | gitui/"
    # zathura
    "$HOME/.config/zathura/ | zathura/"
    # tridactyl
    "$HOME/.config/tridactyl/ | tridactyl/"
    # lldb
    "$HOME/.lldbinit | lldb/lldbinit"
    "$HOME/.lldb/scripts/ | lldb/scripts/"
    # Mime associations
    "$HOME/.config/mimeapps.list | misc/mimeapps.list"
    # ssh
    "$HOME/.ssh/config | ssh/config"
    # OTP tool
    "$HOME/.config/otp/ | otp/"
)

behemoth=(
    # wayvnc
    "$HOME/.config/wayvnc/ | wayvnc/"
    # samba
    "/etc/samba/smb.conf | samba/smb.conf"
    # evremap
    "/etc/evremap.toml | evremap/evremap.toml"
)

workmule=(
    # evremap
    "/etc/evremap.toml | evremap/evremap.toml"
)

function sync_files() {
    target="$1"
    echo "[$target]"

    shift
    files=("$@")

    for file in "${files[@]}"; do
        system_file=$(echo $file | cut -d'|' -f1 | sed 's/^ *//;s/ *$//')
        local_file=$(echo $file | cut -d'|' -f2 | sed 's/^ *//;s/ *$//')
        local_file="$target/$local_file"

        if [[ $OPERATION == "out" ]]; then
            in_file=$local_file
            out_file=$system_file
        else
            in_file=$system_file
            out_file=$local_file
        fi

        echo "* " $in_file ">" $out_file

        if [[ $CONFIRM == 1 ]]; then
            printf "proceed [N/y]? "
            read confirmed
        else
            confirmed="y"
        fi

        if [[ $confirmed == "y" ]]; then
            if [[ -f "$in_file" ]] || [[ -d "$in_file" ]]; then
                if [[ $DRYRUN == 0 ]]; then
                    mkdir -p $(dirname "$out_file")
                    $SYNC $in_file $out_file
                fi
            else
                echo "Skipping unexistent file \"$in_file\""
            fi
        fi
    done
}

if [[ $HOSTNAME = "" ]]; then
    HOSTNAME=$(hostname)
fi

declare -n file_list="$HOSTNAME"

# Sync common files
sync_files "common" "${common[@]}"

# Sync system specific files
sync_files "$HOSTNAME" "${file_list[@]}"
