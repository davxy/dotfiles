# ~/.bashrc
#
# executed by bash(1) for non-login shells.
#
# Version 0.2.2
#
# Assumes:
# - alacritty
# - zellij
# - starship
# - ranger
# - eza
# - zoxide
# - bat
# - yazi

# If not running interactively (e.g. scp), don't do anything
if [[ $- != *i* ]]; then
    return
fi

# Start zellij session
# Do this asap to prevent double execution of this whole script
if [[ -z "$ZELLIJ" ]]; then
    # short sleep to prevent ending up with strange artifacts
    # when using Hyprland animations
    sleep 0.03
    zellij
    if [[ -f /tmp/zexit ]]; then
        rm /tmp/zexit
    else
        exit
    fi
fi    

# Prevent nested `ranger` sessions
function ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        $(which ranger) --choosedir=/tmp/rangerdir "$@"
        cd "$(cat /tmp/rangerdir)"; rm /tmp/rangerdir
    else
        exit
    fi
}

# Keep current directly when exit yazi
function yazi() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	$(which yazi) "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Allow exiting from zellij
function zellij() {
    if [[ $1 == "exit" ]]; then
        touch /tmp/zexit
        exit
    fi

    if [[ -z $ZELLIJ || -n "$@" ]]; then
        $(which zellij) "$@"
    else
        $(which zellij) action new-tab
    fi
}

function open() {
    (nohup $(which xdg-open) "$@" > /dev/null 2>&1 &) 2>/dev/null
}

function pipx_activate() {
    local env_name="$1"
    local pipx_home=$(pipx environment | awk -F= '/^PIPX_HOME=/ && $2 { print $2 }')
    local env_path="$pipx_home/venvs/$env_name/bin/activate"
    if [ -f "$env_path" ]; then
        source "$env_path"
    else
        echo "pipx environment '$env_name' not found in '$pipx_home/venvs'."
    fi
}

# Custom commands to run on before prompt
function __prompt_command_hook() {
    # Update last visited dir
    echo $PWD > /tmp/last_dir
    # Update global history
    #history -a; history -c; history -r
}
PROMPT_COMMAND="__prompt_command_hook"

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups
# For setting history length see HISTSIZE
HISTSIZE=2000
# Append to the history file, don't overwrite it
shopt -s histappend

# Restore the last visited folder when a new terminal is opened
if [[ -f /tmp/last_dir ]]; then
    cd "$(cat /tmp/last_dir)"
fi

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# helix
if ! which "hx" >/dev/null 2>&1; then
    alias hx='helix'
fi
# alacritty
alias term=alacritty
# bat
alias cat='bat -pP'
# ripgrep
alias grep=rg
# eza
alias ls=eza
alias ll='eza -lg'
alias la='eza -alg'
alias tree='eza -T'
# zoxide
alias cd=z
alias ze="fzf --bind 'enter:execute(rifle {})'"
# ranger
alias ra=ranger
# python
alias py=python
# gitui
alias gu=gitui
# zellij
alias zj=zellij
# jless
alias jl=jless
# yazi
alias yy=yazi

# Disable START/STOP output control.
# Do not interpret Ctrl-s and Ctrl-q as flow signals for terminal output.
# Zellij disables it anyway (but we may exit zellij)
stty -ixon

# Disable shell exit when reading EOF 
set -o ignoreeof

# Start gpg-agent as ssh-agent
# The gpg-agent need to be run once because ssh can't start it automatically.
# (see gpg-agent man page for details under `--enable-ssh-support`)
unset SSH_AGENT_PID
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
# Set GPG_TTY as stated in `man gpg-agent`
export GPG_TTY=$(tty)
# gpg-connect-agent reloadagent /bye > /dev/null
gpg-connect-agent updatestartuptty /bye > /dev/null

# Enable vi mode
set -o vi

# Manually source fzf completions
# (otherwise we require to trigger fzf once using fzf+<tab>)
source /usr/share/fzf/key-bindings.bash
source /usr/share/fzf/completion.bash

# Initialize zoxide
eval "$(zoxide init bash)"

# Initialize starship
eval "$(starship init bash)"
