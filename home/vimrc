"------------------------------------------------------------------------------
" VimPlug
"------------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

"--- Generic
" Git plugin
Plug 'tpope/vim-fugitive'
" Git plugin to view diff
Plug 'gitgutter/Vim'
" NerdTree
Plug 'scrooloose/nerdtree'
" NerdTree git plugin
Plug 'Xuyuanp/nerdtree-git-plugin'
" Tabularize
Plug 'godlygeek/tabular'
" Fuzzy finder
Plug 'junegunn/fzf'

"--- Development
" Language Server Protocol client
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" tag browser, useful if using any kind of ctags.
Plug 'majutsushi/tagbar'
" Automatic closing
Plug 'jiangmiao/auto-pairs'
" Syntax
"Plug 'vim-syntastic/syntastic'
" Rust
Plug 'rust-lang/rust.vim'
" Code comments
Plug 'tpope/vim-commentary'
" Clippy plugin
"Plug 'd3m3vilurr/clippy.vim'
" Rainbow (different shade of color to paretheses)
Plug 'frazrepo/vim-rainbow'
" Vimspector debugger support
Plug 'puremourning/vimspector'

"--- Look and Feel
" Development icons
Plug 'ryanoasis/vim-devicons'
" Syntax highlight in NerdTree
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Status and tabline
Plug 'vim-airline/vim-airline'
" Solarized theme
Plug 'altercation/vim-colors-solarized'

call plug#end()

"------------------------------------------------------------------------------
" Features
"------------------------------------------------------------------------------

" Enable syntax highlighting (by name)
syntax enable

" Friendly color scheme
"colorscheme desert
if has('gui_running')
    set background=light
    set guioptions-=m
    set guioptions-=T
else
    set background=dark
endif
colorscheme solarized
hi Normal guibg=NONE ctermbg=NONE

"set guifont=Droid_SansMono_Nerd_Font:h11

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific
filetype indent plugin on

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Set UTF-8 encoding
set encoding=UTF-8

" Keep the cursor in the middle
set scrolloff=20

" Enable mouse support
set mouse=a

" GDB built-in plugin
"packadd! termdebug

"------------------------------------------------------------------------------
" Main options
"------------------------------------------------------------------------------

" Allows hiding buffers even though they contain modifications which have not
" yet been written back to the associated file. Vim will complain if you try
" to quit without saving, and swap files will keep you safe if your computer
" crashes
set hidden

" Better command line completion.
" Make use of the "status line" to show possible completions of command line
" commands, file names, and more.
" Usage example: ":color <Tab>" will list all the possibilities
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches
set hlsearch

"------------------------------------------------------------------------------
" Usability options
"------------------------------------------------------------------------------

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Display the cursor position on the last line of the screen or in the status
" line of a window set ruler
set ruler

" Display relative line numbers
set number
set rnu

" Control the initial size of vim
"set columns=80
set wrapmargin=8

set textwidth=80
set colorcolumn=+1

" Leader key command timeout (leader-key is set by default as '\')
set timeoutlen=300

"------------------------------------------------------------------------------
" Indentation options
"------------------------------------------------------------------------------

" Hitting tab in insert mode produce the appropriate number of spaces
set expandtab

" How many columns a tab counts for. The command affect how existing text is
" displayed
set tabstop=4

" How many columns a Tab counts when in insert mode. If softtabstop is less
" than tabstop and expandtab is not set, vim will use a combination of tabs
" and spaces to make up the desired spacing.
set softtabstop=4

" How many columns text is indented with the reindent operations (<< and >>)
" and automatic C-style indentation
set shiftwidth=4

"------------------------------------------------------------------------------
" Useful auto commands
"------------------------------------------------------------------------------

" Remove all trailing spaces in a file before saving
autocmd BufWritePre * :%s/\s\+$//e
" Remove all blank lines at the end of the file
autocmd BufWritePre * :%s/\($\n\s*\)\+\%$//e

" Highlight cursor line
autocmd InsertEnter,InsertLeave * set cul!

"------------------------------------------------------------------------------
" Mappings configuration
"------------------------------------------------------------------------------

nmap <F2> :NERDTreeToggle<CR>
nmap <F3> :TagbarToggle<CR>

" Buffers switching
nmap <C-j> :bp<CR>
nmap <C-k> :bn<CR>
" Close current buffer and open the previous
nmap <leader>q :bp<cr>:bd #<cr>
"
" Double exit to exit CoC suggestions
inoremap <C-[> <C-[><C-[>

nnoremap <C-f> :FZF<CR>

"------------------------------------------------------------------------------
" Termdebug configuration
"------------------------------------------------------------------------------

" Better window split
let g:termdebug_popup = 1
let g:termdebug_wide = 163
let g:termdebug_useFloatingHover = 1
nnoremap <F5> :Termdebug<cr>
nnoremap <RightMouse> :Evaluate<cr>

" Adjust colors
highlight debugPC ctermbg=0 cterm=bold

"------------------------------------------------------------------------------
" Vimspector configuration
"------------------------------------------------------------------------------

let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
"let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector

"------------------------------------------------------------------------------
" Rusty-ctags configuration
"------------------------------------------------------------------------------

"autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/
"autocmd BufWritePost *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&" | redraw!

"------------------------------------------------------------------------------
" Plugins configuration
"------------------------------------------------------------------------------

"""""""""""""""""""""""""""
" CoC Plugin
"""""""""""""""""""""""""""

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"
" Airline plugin configuration
"

let g:airline#extensions#tabline#enabled = 1

"
" Syntastic plugin configuration
"

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
" C Language
let g:syntastic_c_check_header = 0
let g:syntastic_c_auto_refresh_includes = 1
"let g:syntastic_c_include_dirs = [ 'include', 'src' ]
let g:syntastic_c_config_file = '.syntastic'
" Rust Language
let g:syntastic_rust_checkers = ['check']

" Vim-Rainbow plugin configuration
"
au FileType rust,c,cpp call rainbow#load()

" Custom Functions
"
" Diff with the saved file version
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
